package replicatorg.plugin.toolpath.skeinforge;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.swing.JComponent;
import javax.swing.JLabel;

import replicatorg.app.Base;
import replicatorg.app.gcode.MutableGCodeSource;
import replicatorg.machine.model.MachineType;
import replicatorg.machine.model.ToolheadAlias;
import replicatorg.model.BuildCode;
import replicatorg.model.GCodeSource;
import replicatorg.plugin.toolpath.skeinforge.SkeinforgeGenerator.SkeinforgeOption;
import replicatorg.plugin.toolpath.skeinforge.SkeinforgeGenerator.SkeinforgePreference;


public class SkeinforgePostProcessor {
	
	private final SkeinforgeGenerator generator;
	
	private MutableGCodeSource source;
	
	// options:
	private MutableGCodeSource startCode = null;
	private MutableGCodeSource endCode = null;
	private ToolheadAlias toolheadTarget = null;
	private MachineType machineType = null;
	private boolean dualstruding = false;
	private boolean prependStart = false;
	private boolean appendEnd = false;
	private boolean prependMetaInfo = false;
	
	public SkeinforgePostProcessor(SkeinforgeGenerator generator)
	{
		this.generator = generator;
	}
	
	public BuildCode runPostProcessing()
	{

		// Check to see if we need to do anything based on selected prefs
		List<SkeinforgePreference> prefs = generator.getPreferences();
		
		// look for prefs we care about
		for(SkeinforgePreference sp : prefs)
		{
			// This works because we know that in ToolpathGeneratorFactory options
			// are only added for this pref if it's true
			if(sp.getName().equals("Use machine-specific start/end gcode"))
			{
				if(!sp.getOptions().isEmpty())
				{
					prependStart = true;
					appendEnd = true;
				}
			}
		}
		
		// Load our code to a source iterator
		source = new MutableGCodeSource(generator.output.file);
		
		if(!dualstruding)
		{
			if(toolheadTarget != null)
				runToolheadSwap(toolheadTarget);
			
			if(prependStart)
				runPrepend(startCode);
			if(appendEnd)
				runAppend(endCode);
		}
		
		if(prependMetaInfo)
		{
			MutableGCodeSource metaInfo = new MutableGCodeSource();
			
			metaInfo.add("(** This GCode was generated by ReplicatorG "+Base.VERSION_NAME+" **)");
			//TRICKY: calling a static method on an instance of a class is considered bad practice,
			//				but I'm not sure how to access that without it
			metaInfo.add("(*  using "+generator.displayName+"  *)");
			metaInfo.add("(*  for a "+machineType.getName()+"  *)");
			metaInfo.add("(*  on "+/*Calendar.getInstance().toString()*/"unknown date"+"  *)");
			metaInfo.add("(**                                 **)");
			
			runPrepend(metaInfo);
		}
		//Write the modified source back to our file
		source.writeToFile(generator.output.file);
		
		return generator.output;
	}
	
	private void runToolheadSwap(ToolheadAlias switchTo)
	{
		System.out.println("runToolheadSwap");
		source.changeToolhead(switchTo);
	}
	
	private void runPrepend(GCodeSource newCode)
	{
		source.add(0, newCode);
	}
	
	private void runAppend(GCodeSource newCode)
	{
		source.add(newCode);
	}
	
	public void enableDualstrusion()
	{
		dualstruding = true;
		
		List<SkeinforgePreference> prefs = generator.getPreferences();
		
		prefs.add(0, new SkeinforgePreference(){
			@Override
			public JComponent getUI() {
				return new JLabel("Dualstruding...");
			}
			@Override
			public List<SkeinforgeOption> getOptions() {
				List<SkeinforgeOption> result = new ArrayList<SkeinforgeOption>();
				result.add(new SkeinforgeOption("preface.csv", "Name of Start File:", ""));
				result.add(new SkeinforgeOption("preface.csv", "Name of End File:", ""));
				result.add(new SkeinforgeOption("outline.csv", "Activate Outline", "False"));
				return result;
			}
			@Override
			public String valueSanityCheck() {
				// TODO Auto-generated method stub
				return null;
			}
			@Override
			public String getName() {
				return "Dualstrusion options";
			}
		});
	}
	
	public void setToolheadTarget(ToolheadAlias tool)
	{
		toolheadTarget = tool;
	}
	
	public void setMachineType(MachineType type)
	{
		machineType = type;
	}

	public void setStartCode(GCodeSource source)
	{
		if(source instanceof MutableGCodeSource)
			startCode = (MutableGCodeSource)source;
		else
			startCode = new MutableGCodeSource(source);
	}
	
	public void setEndCode(GCodeSource source)
	{
		if(source instanceof MutableGCodeSource)
			endCode = (MutableGCodeSource)source;
		else
			endCode = new MutableGCodeSource(source);
	}
	
	public void setPrependStart(boolean doPrepend)
	{
		prependStart = doPrepend;
	}
	
	public void setAppendEnd(boolean doAppend)
	{
		appendEnd = doAppend;
	}
	
	public void setPrependMetaInfo(boolean doPrepend)
	{
		prependMetaInfo = doPrepend;
	}
}
